paths:
  /api/books/{bookId}/reviews/{reviewId}/comments:
    get:
      tags:
        - Comment
      summary: 리뷰별 댓글 조회
      description: 특정 리뷰의 댓글 목록을 페이지네이션으로 조회합니다.
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            type: string
            format: objectId
          description: 책 ID
          example: "507f1f77bcf86cd799439011"
        - name: reviewId
          in: path
          required: true
          schema:
            type: string
            format: objectId
          description: 리뷰 ID
          example: "507f191e810c19729de860ea"
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: 페이지 번호
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: 페이지당 항목 수
      responses:
        '200':
          description: 댓글 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/Comment'
                        - type: object
                          properties:
                            userId:
                              type: object
                              properties:
                                _id:
                                  type: string
                                  format: objectId
                                nickname:
                                  type: string
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                        example: 1
                      limit:
                        type: integer
                        example: 10
                      total:
                        type: integer
                        example: 25

    post:
      tags:
        - Comment
      summary: 댓글 생성
      description: 특정 리뷰에 새로운 댓글을 생성합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            type: string
            format: objectId
          description: 책 ID
          example: "507f1f77bcf86cd799439011"
        - name: reviewId
          in: path
          required: true
          schema:
            type: string
            format: objectId
          description: 리뷰 ID
          example: "507f191e810c19729de860ea"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - content
              properties:
                content:
                  type: string
                  description: 댓글 내용
                  example: "정말 좋은 리뷰네요! 저도 이 책을 읽어보고 싶어졌습니다."
      responses:
        '201':
          description: 댓글 생성 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Comment'
        '400':
          description: 댓글 내용을 입력하세요
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 리뷰가 존재하지 않습니다
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 인증 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/books/{bookId}/reviews/{reviewId}/comments/{commentId}:
    put:
      tags:
        - Comment
      summary: 댓글 수정
      description: 기존 댓글을 수정합니다. 본인의 댓글만 수정 가능합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            type: string
            format: objectId
          description: 책 ID
          example: "507f1f77bcf86cd799439011"
        - name: reviewId
          in: path
          required: true
          schema:
            type: string
            format: objectId
          description: 리뷰 ID
          example: "507f191e810c19729de860ea"
        - name: commentId
          in: path
          required: true
          schema:
            type: string
            format: objectId
          description: 댓글 ID
          example: "507f191e810c19729de860eb"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  description: 수정할 댓글 내용
                  example: "수정된 댓글 내용입니다."
      responses:
        '200':
          description: 댓글 수정 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Comment'
        '403':
          description: 권한 없음 (본인의 댓글이 아님)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 댓글을 찾을 수 없습니다
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 인증 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - Comment
      summary: 댓글 삭제
      description: 댓글을 삭제합니다. 본인의 댓글만 삭제 가능합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            type: string
            format: objectId
          description: 책 ID
          example: "507f1f77bcf86cd799439011"
        - name: reviewId
          in: path
          required: true
          schema:
            type: string
            format: objectId
          description: 리뷰 ID
          example: "507f191e810c19729de860ea"
        - name: commentId
          in: path
          required: true
          schema:
            type: string
            format: objectId
          description: 댓글 ID
          example: "507f191e810c19729de860eb"
      responses:
        '200':
          description: 댓글 삭제 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "삭제되었습니다."
        '403':
          description: 권한 없음 (본인의 댓글이 아님)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 댓글을 찾을 수 없습니다
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 인증 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/books/{bookId}/reviews/{reviewId}/comments/{commentId}/like:
    post:
      tags:
        - Comment
      summary: 댓글 좋아요 등록
      description: 특정 댓글에 좋아요를 등록합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            type: string
            format: objectId
          description: 책 ID
          example: "507f1f77bcf86cd799439011"
        - name: reviewId
          in: path
          required: true
          schema:
            type: string
            format: objectId
          description: 리뷰 ID
          example: "507f191e810c19729de860ea"
        - name: commentId
          in: path
          required: true
          schema:
            type: string
            format: objectId
          description: 댓글 ID
          example: "507f191e810c19729de860eb"
      responses:
        '200':
          description: 좋아요 등록 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "좋아요 등록"
        '404':
          description: 댓글이 존재하지 않습니다
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: 이미 좋아요를 눌렀습니다
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 인증 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - Comment
      summary: 댓글 좋아요 취소
      description: 특정 댓글의 좋아요를 취소합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            type: string
            format: objectId
          description: 책 ID
          example: "507f1f77bcf86cd799439011"
        - name: reviewId
          in: path
          required: true
          schema:
            type: string
            format: objectId
          description: 리뷰 ID
          example: "507f191e810c19729de860ea"
        - name: commentId
          in: path
          required: true
          schema:
            type: string
            format: objectId
          description: 댓글 ID
          example: "507f191e810c19729de860eb"
      responses:
        '200':
          description: 좋아요 취소 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "좋아요 취소"
        '400':
          description: 좋아요를 누르지 않았습니다
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 인증 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT 토큰을 Bearer 형식으로 전달

  schemas:
    Comment:
      type: object
      properties:
        _id:
          type: string
          format: objectId
          example: "507f191e810c19729de860eb"
        reviewId:
          type: string
          format: objectId
          example: "507f191e810c19729de860ea"
        userId:
          type: string
          format: objectId
          example: "507f1f77bcf86cd799439012"
        content:
          type: string
          example: "정말 좋은 리뷰네요! 저도 이 책을 읽어보고 싶어졌습니다."
        likes:
          type: number
          example: 5
          description: 좋아요 수
        createdAt:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00.000Z"
        updatedAt:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00.000Z"

    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "오류 메시지"
        error:
          type: string
          example: "상세 오류 내용"