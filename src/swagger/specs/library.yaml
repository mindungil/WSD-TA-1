paths:
  /library:
    post:
      tags:
        - Library
      summary: 라이브러리에 도서 추가
      description: 사용자의 라이브러리에 도서를 추가합니다.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - bookId
                - isbn
              properties:
                bookId:
                  type: string
                  format: objectId
                  description: 도서 ID (ObjectId)
                  example: "64a7b8c9d1e2f3a4b5c6d7e8"
                isbn:
                  type: string
                  description: 도서의 ISBN
                  example: "9788932473901"
      responses:
        '201':
          description: 도서가 성공적으로 라이브러리에 추가됨
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Library'
        '403':
          description: 책 정보가 존재하지 않음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: bookId가 필요함
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: 이미 라이브러리에 존재하는 도서 (중복)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    get:
      tags:
        - Library
      summary: 라이브러리 도서 조회 (단일)
      description: 제목으로 라이브러리에서 특정 도서를 조회합니다.
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: title
          required: true
          schema:
            type: string
          description: 조회할 도서의 제목
          example: "해리포터와 마법사의 돌"
      responses:
        '200':
          description: 도서 조회 성공 (없어도 오류 아님)
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    oneOf:
                      - $ref: '#/components/schemas/Library'
                      - type: null

  /library/list:
    get:
      tags:
        - Library
      summary: 라이브러리 목록 조회
      description: 사용자의 라이브러리 목록을 페이지네이션으로 조회합니다.
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: 페이지 번호
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: 페이지당 항목 수
      responses:
        '200':
          description: 라이브러리 목록 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  page:
                    type: integer
                    example: 1
                  limit:
                    type: integer
                    example: 10
                  total:
                    type: integer
                    example: 25
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Library'

  /library/{id}:
    delete:
      tags:
        - Library
      summary: 라이브러리 도서 삭제
      description: 라이브러리에서 특정 도서를 삭제합니다.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: objectId
          description: 삭제할 라이브러리 항목의 ID
          example: "64a7b8c9d1e2f3a4b5c6d7e8"
      responses:
        '200':
          description: 도서 삭제 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "삭제되었습니다."
        '403':
          description: 권한이 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 해당 등록을 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Library:
      type: object
      properties:
        _id:
          type: string
          format: objectId
          description: 라이브러리 항목 ID
          example: "64a7b8c9d1e2f3a4b5c6d7e8"
        userId:
          type: string
          format: objectId
          description: 사용자 ID
          example: "64a7b8c9d1e2f3a4b5c6d7e9"
        bookId:
          type: string
          format: objectId
          description: 도서 ID
          example: "64a7b8c9d1e2f3a4b5c6d7ea"
        isbn:
          type: string
          description: 도서의 ISBN
          example: "9788932473901"
        createdAt:
          type: string
          format: date-time
          description: 생성 일시
          example: "2023-07-07T10:30:00.000Z"
        updatedAt:
          type: string
          format: date-time
          description: 수정 일시
          example: "2023-07-07T10:30:00.000Z"

    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          description: 오류 메시지
          example: "오류가 발생했습니다."
        error:
          type: string
          description: 상세 오류 정보
          example: "Detailed error information"

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT