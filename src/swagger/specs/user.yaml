paths:
  /api/users/register:
    post:
      tags:
        - Authentication
      summary: 회원가입
      description: 새로운 사용자를 등록합니다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - nickname
                - email
                - password
              properties:
                nickname:
                  type: string
                  example: "사용자123"
                  description: 사용자 닉네임 (유니크)
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                  description: 사용자 이메일 (유니크)
                password:
                  type: string
                  minLength: 6
                  example: "password123"
                  description: 사용자 비밀번호
      responses:
        '201':
          description: 회원가입 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      user:
                        type: object
                        properties:
                          id:
                            type: string
                            example: "64a7b8c9d1e2f3g4h5i6j7k8"
                          nickname:
                            type: string
                            example: "사용자123"
                          email:
                            type: string
                            example: "user@example.com"
                      token:
                        type: string
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '400':
          description: 필수 필드 누락
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                success: false
                message: "모든 필드를 입력하세요."
        '409':
          description: 이미 존재하는 이메일
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                success: false
                message: "이미 가입된 이메일입니다."

  /api/users/login:
    post:
      tags:
        - Authentication
      summary: 로그인
      description: 사용자 로그인을 처리합니다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                  description: 사용자 이메일
                password:
                  type: string
                  example: "password123"
                  description: 사용자 비밀번호
      responses:
        '200':
          description: 로그인 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      user:
                        type: object
                        properties:
                          id:
                            type: string
                            example: "64a7b8c9d1e2f3g4h5i6j7k8"
                          nickname:
                            type: string
                            example: "사용자123"
                          email:
                            type: string
                            example: "user@example.com"
                      token:
                        type: string
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '400':
          description: 필수 필드 누락
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                success: false
                message: "이메일과 비밀번호를 입력하세요."
        '404':
          description: 존재하지 않는 이메일
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                success: false
                message: "가입되지 않은 이메일입니다."
        '401':
          description: 비밀번호 불일치
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                success: false
                message: "비밀번호가 일치하지 않습니다."

  /api/users/profile:
    get:
      tags:
        - User
      summary: 회원 정보 조회
      description: 현재 로그인한 사용자의 프로필 정보를 조회합니다.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 프로필 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        example: "64a7b8c9d1e2f3g4h5i6j7k8"
                      nickname:
                        type: string
                        example: "사용자123"
                      email:
                        type: string
                        example: "user@example.com"
        '401':
          description: 인증 필요
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags:
        - User
      summary: 회원 정보 수정
      description: 현재 로그인한 사용자의 프로필 정보를 수정합니다.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nickname:
                  type: string
                  example: "새로운닉네임"
                  description: 수정할 닉네임 (선택사항)
                password:
                  type: string
                  example: "newpassword123"
                  description: 수정할 비밀번호 (선택사항)
      responses:
        '200':
          description: 프로필 수정 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        example: "64a7b8c9d1e2f3g4h5i6j7k8"
                      nickname:
                        type: string
                        example: "새로운닉네임"
                      email:
                        type: string
                        example: "user@example.com"
        '401':
          description: 인증 필요
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - User
      summary: 회원 탈퇴
      description: 현재 로그인한 사용자의 계정을 삭제합니다.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 회원 탈퇴 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "회원 탈퇴 완료"
        '401':
          description: 인증 필요
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT 토큰을 Bearer 형식으로 전달

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          description: 사용자 고유 ID
          example: "64a7b8c9d1e2f3g4h5i6j7k8"
        email:
          type: string
          format: email
          description: 사용자 이메일
          example: "user@example.com"
        nickname:
          type: string
          description: 사용자 닉네임
          example: "사용자123"
        roles:
          type: array
          items:
            type: string
          description: 사용자 권한
          example: ["USER"]
        createdAt:
          type: string
          format: date-time
          description: 계정 생성일
          example: "2024-01-15T10:30:00.000Z"
        updatedAt:
          type: string
          format: date-time
          description: 계정 수정일
          example: "2024-01-15T10:30:00.000Z"

    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "에러 메시지"
      required:
        - success
        - message